# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Person implements Node {
  userId: String!
  name: String!
  id: String!
}

interface Node {
  id: String!
}

type Privilege {
  id: String!
  createdAt: String!
  value: PRIVILEGE!
  to: AdminAndUserUnion!
  creator: Admin!
}

enum PRIVILEGE {
  ROOT
  CAN_CREATE_ADMIN
  CAN_DELETE_ADMIN
  CAN_DELETE_USER
  CAN_CREATE_USER
  CAN_UPDATE_USER
}

union AdminAndUserUnion = User | Admin

type PrivilegesConnection {
  nodes: [Privilege!]!
  totalCount: Int!
}

type User implements Person & Node {
  userId: String!
  name: String!
  id: String!
  openId: String!
  unionId: String!
  gender: GENDER!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  avatarImageUrl: String!
  school: String!
  grade: String!

  """分页返回帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!

  """用户创建的主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """用户创建的会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """用户收到的举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!
}

enum GENDER {
  NONE
  MALE
  FEMALE
}

type LoginResult implements Node & Person {
  userId: String!
  name: String!
  id: String!
  openId: String!
  unionId: String!
  gender: GENDER!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  avatarImageUrl: String!
  school: String!
  grade: String!

  """分页返回帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!

  """用户创建的主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """用户创建的会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """用户收到的举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!
  token: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type UsersConnection {
  nodes: [User!]!
  totalCount: Int!
}

type NodesConnection {
  edges: [NodeEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodeEdge {
  cursor: String!
  node: Node!
}

type Admin implements Node & Person {
  userId: String!
  name: String!
  id: String!
  avatarImageUrl: String!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!

  """管理员的认证者"""
  credential: Credential

  """当前管理员认证过的其他管理员"""
  credentials(offset: Int!, first: Int!): CredentialsConnection!
  privileges(offset: Int!, first: Int!): PrivilegesConnection!
}

type AdminsConnection {
  nodes: [Admin!]!
  totalCount: Int!
}

type Credential {
  id: String!
  createdAt: String!
}

type CredentialsConnection {
  nodes: [Credential!]!
  totalCount: Int!
}

type Post {
  id: String!
  title: String!
  content: String!
  createdAt: String!
  images: [String!]!

  """帖子的创建者"""
  creator: User!

  """帖子的评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """帖子所属的主题"""
  subject: Subject

  """帖子的点赞"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """帖子收到的举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!
}

type PostsConnection {
  nodes: [Post!]!
  totalCount: Int!
}

type Comment implements Node {
  id: String!
  content: String!
  createdAt: String!
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!
  votes(first: Int = 10, offset: Int = 0): VotesConnection!
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!
  post: Post!
  creator: User!
}

type CommentsConnection {
  nodes: [Comment!]!
  totalCount: Int!
}

type Report implements Node {
  id: String!
  createdAt: String!
  type: REPORT_TYPE!
  description: String!
  state: REPORT_STATE!

  """被举报的对象"""
  to: Report2Union!

  """举报的创建者"""
  creator: User!

  """举报所在的会话"""
  conversation: Conversation!
}

enum REPORT_TYPE {
  LEWD_HARASS
  FRAUD
  OTHER
}

enum REPORT_STATE {
  OPEN
  PENDING
  CLOSE
}

union Report2Union = User | Post | Comment

type ReportsConnection {
  nodes: [Report!]!
  totalCount: Int!
}

type Conversation implements Node {
  id: String!
  createdAt: String!
  title: String!
  description: String!
  state: CONVERSATION_STATE!

  """返回会话中的所有消息"""
  messages(first: Int = 10, offset: Int = 0): MessageItemConnection!

  """返回会话的参与者"""
  participants(first: Int = 10, offset: Int = 0): ParticipantsConnection!
}

enum CONVERSATION_STATE {
  RUNNING
  CLOSE
}

type MessageItemConnection {
  nodes: [MessageItem!]!
  totalCount: Int!
}

union MessageItem = Message | Report

type ParticipantsConnection {
  nodes: [User!]!
  totalCount: Int!
}

type ConversationsConnection {
  nodes: [Conversation!]!
  totalCount: Int!
}

type Message implements Node {
  id: String!
  createdAt: String!
  content: String!

  """返回消息所属的会话"""
  conversation: Conversation!

  """返回消息的创建者"""
  creator: MessageCreatorUnion!
}

union MessageCreatorUnion = User | Admin

type Votable {
  """Number of upvotes that this node has received."""
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this node.
  """
  viewerCanUpvote: Boolean!

  """Whether or not the current user has already upvoted this node."""
  viewerHasUpvoted: Boolean!
}

type VotesConnection {
  totalCount: Int!
  viewerCanUpvote: Boolean!
  viewerHasUpvoted: Boolean!
  nodes: [Vote!]!
}

type Vote {
  id: String!
  createdAt: String!
}

type SetDbSchema {
  arrayIndexOffset: Int!
  array: [String!]!
  pivot_: Float!
  wrappers_: String
  messageId_: String
  convertedPrimitiveFields_: String!
}

type Delete {
  id: String!
  createdAt: String!
}

type Subject {
  id: String!
  createdAt: String!
  title: String!
  description: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!

  """主题的创建者"""
  creator: User!

  """分页返回主题中的帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!
}

type SubjectsConnection {
  nodes: [Subject!]!
  totalCount: Int!
}

type SearchResultItemConnection {
  totalCount: Int!
  nodes: [SearchResultItem!]!
}

union SearchResultItem = Post | User | Comment | Subject

type PostImagesUploadCredentialInfo {
  """签证生效时间"""
  startTime: Int!

  """签证过期时间"""
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!

  """桶id"""
  bucket: String!

  """桶所在的地域"""
  region: String!

  """key"""
  keys: [String!]!
}

type AvatarImageUploadCredentialInfo {
  startTime: Int!
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!
  bucket: String!
  region: String!
  key: String!
}

type Query {
  post(id: String!): Post!
  posts(first: Int = 10, offset: Int = 0): PostsConnection!

  """用户登录"""
  login(
    """用户 userId，注意不是 id"""
    userId: String!
    sign: String!
  ): LoginResult!

  """当前id对应的的用户画像"""
  whoAmI: AdminAndUserUnion!

  """分页返回用户"""
  users(first: Int = 10, offset: Int = 0): UsersConnection!
  comment(id: String!): Comment!

  """根据id返回管理员"""
  admin(id: String!): Admin!

  """分页返回所有的管理员"""
  admins(offset: Int!, first: Int!): AdminsConnection!

  """根据主题id返回对应的主题"""
  subject(id: String!): Subject!

  """分页返回主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!
  search(
    first: Int = 10
    offset: Int = 0

    """待检索的关键字"""
    query: String!
    type: SEARCHTYPE!
  ): SearchResultItemConnection!
  node(id: String!): Node!
  nodes(ids: [String!]!): NodesConnection!

  """根据举报id返回举报"""
  report(id: String!): Report!

  """所有的举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """返回指定的消息"""
  message(id: String!): Message!

  """返回指定的会话"""
  conversation(id: String!): Conversation!

  """分页返回会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """用户上传头像时，先根据文件名获取临时上传凭证信息"""
  getAvatarImageUploadCredentialInfo(fileName: String!): AvatarImageUploadCredentialInfo!

  """用户上传帖子图片时，先根据文件名获取临时上传凭证信息"""
  getPostImagesUploadCredentialInfo(fileNames: [String!]!): PostImagesUploadCredentialInfo!
  privilege(id: String!): Privilege!
}

enum SEARCHTYPE {
  USER
  COMMENT
  POST
  SUBJECT
}

type Mutation {
  """创建一个帖子"""
  createPost(
    """帖子标题"""
    title: String!

    """帖子内容"""
    content: String!

    """帖子图片"""
    images: [String!]

    """帖子所属的主题"""
    subjectId: String
  ): Post!

  """用户注册"""
  register(input: UserRegisterInput!): User!
  addCommentOnComment(
    """相应的评论的id"""
    to: String!
    content: String!
  ): Comment!
  addCommentOnPost(
    """相应的帖子的id"""
    to: String!
    content: String!
  ): Comment!
  addUpvoteOnPost(postId: String!): Votable!
  addUpvoteOnComment(commentId: String!): Votable!
  removeUpvoteOnComment(from: String!): Votable!
  removeUpvoteOnPost(from: String!): Votable!

  """注册一个管理员，需要使用authen认证新注册的管理员"""
  registerAdmin(
    userId: String!
    name: String!
    avatarImageUrl: String!

    """管理员密码"""
    sign: String!
  ): Admin!

  """已存在的管理员认证一个新注册的管理员"""
  authenAdmin(to: String!): Admin!

  """创建一个主题"""
  createSubject(input: CreateSubjectInput!): Subject!

  """举报一条评论"""
  addReportOnComment(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """举报一个帖子"""
  addReportOnPost(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """举报一个用户"""
  addReportOnUser(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """管理员接口：认为举报无效"""
  discardReport(content: String!, reportId: String!): Boolean!

  """管理员接口：认为举报有效"""
  acceptReport(content: String!, reportId: String!): Boolean!

  """向指定的会话中添加一条消息"""
  addMessageOnConversation(content: String!, id: String!): Message!

  """创建一个会话"""
  createConversation(title: String!, description: String!, participants: [String!]!): Conversation!
  setSchema: SetDbSchema!
  dropAllData: Boolean!
  dropData: Boolean!
  deletePost(postId: String!): Delete!
  deleteComment(commentId: String!): Delete!
  addPrivilegeOnAdmin(privilege: PRIVILEGE!, adminId: String!): Privilege!
}

input UserRegisterInput {
  openId: String!
  unionId: String!
  name: String!
  gender: GENDER!
  avatarImageUrl: String!
  school: String!
  grade: String!
  userId: String!
  sign: String!
}

input CreateSubjectInput {
  title: String!
  description: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!
}
