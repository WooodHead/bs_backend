# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: String!
}

interface Person implements Node {
  userId: String!
  name: String!
  id: String!
}

interface Votable {
  """Number of upvotes that this node has received."""
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this node.
  """
  viewerCanUpvote: Boolean!

  """Whether or not the current user has already upvoted this node."""
  viewerHasUpvoted: Boolean!
}

type NodesConnection {
  edges: [NodeEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodeEdge {
  cursor: String!
  node: Node!
}

type Admin implements Person & Node {
  id: String!
  userId: String!
  name: String!
}

type User implements Person & Node {
  id: String!
  userId: String!
  name: String!
  openId: String!
  unionId: String!
  gender: GENDER!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  avatarImageUrl: String!
  school: String!
  grade: String!
  posts(offset: Int = 0, first: Int = 2): PostsConnection!
  followers(last: Float!, first: Float!, before: String!, after: String!): FollowersConnection!
  followings(last: Float!, first: Float!, before: String!, after: String!): FolloweringsConnection!
  subjects(last: Float!, first: Float!, before: String!, after: String!): SubjectsConnection!
  comments(last: Float!, first: Float!, before: String!, after: String!): CommentsConnection!
}

enum GENDER {
  NONE
  MALE
  FEMALE
}

type LoginResult implements Node & Person {
  id: String!
  userId: String!
  name: String!
  openId: String!
  unionId: String!
  gender: GENDER!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  avatarImageUrl: String!
  school: String!
  grade: String!
  posts(offset: Int = 0, first: Int = 2): PostsConnection!
  followers(last: Float!, first: Float!, before: String!, after: String!): FollowersConnection!
  followings(last: Float!, first: Float!, before: String!, after: String!): FolloweringsConnection!
  subjects(last: Float!, first: Float!, before: String!, after: String!): SubjectsConnection!
  comments(last: Float!, first: Float!, before: String!, after: String!): CommentsConnection!
  token: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type UsersConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FollowersConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

type FolloweringsConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Comment implements Node {
  id: String!
  content: String!
  createdAt: String!
  comments(offset: Int = 2, first: Int = 0): CommentsConnection!
}

type CommentsConnection {
  nodes: [Comment!]!
  totalCount: Int!
}

type Subject {
  id: String!
  createdAt: String!
  title: String!
  subscription: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!
  creator: User!
  followers(last: Float!, first: Float!, before: String!, after: String!): FollowersConnection!
  posts(offset: Int = 0, first: Int = 2): PostsConnection!
}

type SubjectsConnection {
  nodes: [Subject!]!
  totalCount: Int!
}

type Post {
  id: String!
  title: String!
  content: String!
  createdAt: String!
  images: [String!]!
  creator: User!
  comments(offset: Int = 2, first: Int = 0): CommentsConnection!
  subject: Subject
}

type PostsConnection {
  nodes: [Post!]!
  totalCount: Int!
}

type SearchResultItemConnection {
  """搜索用户时，返回的结果中的用户总数"""
  userCount: Int

  """搜索帖子时，返回的结果中帖子的总数"""
  postCount: Int

  """搜索评论时，返回的结果中评论的总数"""
  commentCount: Int
  nodes: [SearchResultItem!]!
}

union SearchResultItem = Post | User | Comment

type Query {
  post(id: String!): Post!
  posts(offset: Int = 0, first: Int = 0): PostsConnection!
  login(sign: String!, userId: String!): LoginResult!
  whoAmI: User!
  users(last: Float!, first: Float!, before: String!, after: String!): UsersConnection!
  comment(id: String!): Comment!
  subject(id: String!): Subject!
  subjects(offset: Int = 0, first: Int = 0): SubjectsConnection!
  search(
    offset: Int = 0
    first: Int = 0

    """待检索的关键字"""
    query: String!
    type: SEARCHTYPE!
  ): SearchResultItemConnection!
  node(id: String!): Node!
  nodes(ids: [String!]!): NodesConnection!
}

enum SEARCHTYPE {
  USER
  COMMENT
  POST
}

type Mutation {
  createPost(subjectId: String, images: [String!]!, content: String!, title: String!): Post!
  deletePost(id: String!): Boolean!
  authenticate(userId: String!): LoginResult!
  register(input: UserRegisterInput!): User!
  followUser(to: String!): Boolean!
  unfollowUser(to: String!): Boolean!
  followSubject(id: String!): Subject!
  updateUser(input: UserUpdateProfileInput!): User!
  addACommentOnComment(
    """相应的评论的id"""
    to: String!
    content: String!
  ): Comment!
  addACommentOnPost(
    """相应的帖子的id"""
    to: String!
    content: String!
  ): Comment!
  addUpvoteOnPost(to: String!): Votable!
  addUpvoteOnComment(to: String!): Votable!
  removeUpvoteOnComment(to: String!): Votable!
  removeUpvoteOnPost(to: String!): Votable!
  createSubject(input: CreateSubjectInput!): Subject!
  updateSubject(input: UpdateSubjectInput!): Subject!
}

input UserRegisterInput {
  openId: String!
  unionId: String!
  name: String!
  gender: GENDER!
  avatarImageUrl: String!
  school: String!
  grade: String!
  userId: String!
  sign: String!
}

input UserUpdateProfileInput {
  name: String
  gender: GENDER
  avatarUrl: String
  school: String
  grade: String
  sign: String
}

input CreateSubjectInput {
  title: String!
  subscription: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!
}

input UpdateSubjectInput {
  id: String!
  title: String
  subscription: String
  avatarUrl: String
  background: String
}
