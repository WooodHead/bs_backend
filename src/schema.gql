# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Person implements Node {
  userId: String!
  name: String!
  id: String!
}

interface Node {
  id: String!
}

type User implements Person & Node {
  userId: String!
  name: String!
  id: String!
  openId: String!
  unionId: String!
  gender: GENDER!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  avatarImageUrl: String!
  school: String!
  grade: String!
  posts(first: Int = 0, offset: Int = 0): PostsConnection!
  followers(first: Int = 0, offset: Int = 0): FollowersConnection!
  followings(first: Int = 0, offset: Int = 0): FolloweringsConnection!
  subjects(first: Int = 0, offset: Int = 0): SubjectsConnection!
  comments(first: Int = 0, offset: Int = 0): CommentsConnection!
  conversations(first: Int = 0, offset: Int = 0): ConversationsConnection!

  """当前用户收到的举报"""
  reports(first: Int = 0, offset: Int = 0): ReportsConnection!
}

enum GENDER {
  NONE
  MALE
  FEMALE
}

type LoginResult implements Node & Person {
  userId: String!
  name: String!
  id: String!
  openId: String!
  unionId: String!
  gender: GENDER!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  avatarImageUrl: String!
  school: String!
  grade: String!
  posts(first: Int = 0, offset: Int = 0): PostsConnection!
  followers(first: Int = 0, offset: Int = 0): FollowersConnection!
  followings(first: Int = 0, offset: Int = 0): FolloweringsConnection!
  subjects(first: Int = 0, offset: Int = 0): SubjectsConnection!
  comments(first: Int = 0, offset: Int = 0): CommentsConnection!
  conversations(first: Int = 0, offset: Int = 0): ConversationsConnection!

  """当前用户收到的举报"""
  reports(first: Int = 0, offset: Int = 0): ReportsConnection!
  token: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type UsersConnection {
  nodes: [User!]!
  totalCount: Int!
}

type FollowersConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

type FolloweringsConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodesConnection {
  edges: [NodeEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodeEdge {
  cursor: String!
  node: Node!
}

type Admin implements Node & Person {
  userId: String!
  name: String!
  id: String!
  avatarImageUrl: String!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!
  privileges: [PRIVILEGE!]!
  credential: Credential
  credentials(first: Int = 0, offset: Int = 0): CredentialsConnection!
}

enum PRIVILEGE {
  ROOT
  CAN_CREATE_ADMIN
  CAN_DELETE_ADMIN
  CAN_DELETE_USER
  CAN_CREATE_USER
  CAN_UPDATE_USER
}

type AdminsConnection {
  nodes: [Admin!]!
  totalCount: Int!
}

type Credential {
  id: String!
  createdAt: String!
}

type CredentialsConnection {
  nodes: [Credential!]!
  totalCount: Int!
}

type Comment implements Node {
  id: String!
  content: String!
  createdAt: String!
  comments(first: Int = 0, offset: Int = 0): CommentsConnection!
  votes(first: Int = 0, offset: Int = 0): VotesConnection!
  reports(first: Int = 0, offset: Int = 0): ReportsConnection!
  post: Post!
  creator: User!
}

type CommentsConnection {
  nodes: [Comment!]!
  totalCount: Int!
}

type Post {
  id: String!
  title: String!
  content: String!
  createdAt: String!
  images: [String!]!
  creator: User!
  comments(first: Int = 0, offset: Int = 0): CommentsConnection!
  subject: Subject
  votes(first: Int = 0, offset: Int = 0): VotesConnection!
  reports(first: Int = 0, offset: Int = 0): ReportsConnection!
}

type PostsConnection {
  nodes: [Post!]!
  totalCount: Int!
}

type Report implements Node {
  id: String!
  createdAt: String!
  type: REPORT_TYPE!
  description: String!
  state: REPORT_STATE!
  to: Report2Union!
  creator: User!
  conversation: Conversation!
}

enum REPORT_TYPE {
  LEWD_HARASS
  FRAUD
  OTHER
}

enum REPORT_STATE {
  OPEN
  PENDING
  CLOSE
}

union Report2Union = User | Post | Comment

type ReportsConnection {
  nodes: [Report!]!
  totalCount: Int!
}

type Conversation implements Node {
  id: String!
  createdAt: String!
  title: String!
  description: String!
  state: CONVERSATION_STATE!
  messages(first: Int = 0, offset: Int = 0): MessageItemConnection!
  participants(first: Int = 0, offset: Int = 0): ParticipantsConnection!
}

enum CONVERSATION_STATE {
  RUNNING
  CLOSE
}

type MessageItemConnection {
  nodes: [MessageItem!]!
  totalCount: Int!
}

union MessageItem = Message | Report

type ParticipantsConnection {
  nodes: [User!]!
  totalCount: Int!
}

type ConversationsConnection {
  nodes: [Conversation!]!
  totalCount: Int!
}

type Message implements Node {
  id: String!
  createdAt: String!
  content: String!
}

type MessagesConnection {
  nodes: [Message!]!
  totalCount: Int!
}

type Votable {
  """Number of upvotes that this node has received."""
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this node.
  """
  viewerCanUpvote: Boolean!

  """Whether or not the current user has already upvoted this node."""
  viewerHasUpvoted: Boolean!
}

type VotesConnection {
  totalCount: Int!
  viewerCanUpvote: Boolean!
  viewerHasUpvoted: Boolean!
  nodes: [Vote!]!
}

type Vote {
  id: String!
  createdAt: String!
}

type Delete {
  id: String!
  createdAt: String!
}

type Subject {
  id: String!
  createdAt: String!
  title: String!
  description: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!
  creator: User!
  followers(first: Int = 0, offset: Int = 0): FollowersConnection!
  posts(first: Int = 0, offset: Int = 0): PostsConnection!
}

type SubjectsConnection {
  nodes: [Subject!]!
  totalCount: Int!
}

type SearchResultItemConnection {
  totalCount: Int!
  nodes: [SearchResultItem!]!
}

union SearchResultItem = Post | User | Comment | Subject

type PostImagesUploadCredentialInfo {
  startTime: Int!
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!
  bucket: String!
  region: String!
  keys: [String!]!
}

type AvatarImageUploadCredentialInfo {
  startTime: Int!
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!
  bucket: String!
  region: String!
  key: String!
}

type Query {
  post(id: String!): Post!
  posts(first: Int = 0, offset: Int = 0): PostsConnection!
  login(
    """用户 userId，注意不是 id"""
    userId: String!
    sign: String!
  ): LoginResult!
  whoAmI: User!
  users(first: Int = 0, offset: Int = 0): UsersConnection!
  comment(id: String!): Comment!
  admins(first: Int = 0, offset: Int = 0): AdminsConnection!
  admin(id: String!): Admin!
  subject(id: String!): Subject!
  subjects(first: Int = 0, offset: Int = 0): SubjectsConnection!
  search(
    first: Int = 0
    offset: Int = 0

    """待检索的关键字"""
    query: String!
    type: SEARCHTYPE!
  ): SearchResultItemConnection!
  node(id: String!): Node!
  nodes(ids: [String!]!): NodesConnection!
  report(id: String!): Report!
  messages(first: Int = 0, offset: Int = 0): MessagesConnection!
  message: Message!
  conversation(id: String!): Conversation!
  conversations(first: Int = 0, offset: Int = 0): ConversationsConnection!

  """用户上传头像时，先根据文件名获取临时上传凭证信息"""
  getAvatarImageUploadCredentialInfo(fileName: String!): AvatarImageUploadCredentialInfo!

  """用户上传帖子图片时，先根据文件名获取临时上传凭证信息"""
  getPostImagesUploadCredentialInfo(fileNames: [String!]!): PostImagesUploadCredentialInfo!
}

enum SEARCHTYPE {
  USER
  COMMENT
  POST
  SUBJECT
}

type Mutation {
  createPost(
    """帖子标题"""
    title: String!

    """帖子内容"""
    content: String!

    """帖子图片"""
    images: [String!]

    """帖子所属的主题"""
    subjectId: String
  ): Post!
  deletePost(postId: String!): Delete!
  register(input: UserRegisterInput!): User!
  followUser(to: String!): Boolean!
  unfollowUser(to: String!): Boolean!
  followSubject(id: String!): Subject!

  """更新当前用户"""
  updateUser(name: String, gender: GENDER, avatarUrl: String, school: String, grade: String, sign: String): User!
  addCommentOnComment(
    """相应的评论的id"""
    to: String!
    content: String!
  ): Comment!
  addCommentOnPost(
    """相应的帖子的id"""
    to: String!
    content: String!
  ): Comment!
  addUpvoteOnPost(postId: String!): Votable!
  addUpvoteOnComment(commentId: String!): Votable!
  removeUpvoteOnComment(from: String!): Votable!
  removeUpvoteOnPost(from: String!): Votable!
  registerAdmin(
    userId: String!
    name: String!
    avatarImageUrl: String!

    """管理员密码"""
    sign: String!
  ): Admin!
  authenAdmin(to: String!): Admin!
  createSubject(input: CreateSubjectInput!): Subject!
  updateSubject(input: UpdateSubjectInput!): Subject!
  addReportOnComment(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!
  addReportOnPost(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!
  addReportOnUser(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """管理员接口：认为举报无效"""
  discardReport(content: String!, reportId: String!): Delete!
  addMessageOnConversation(content: String!, id: String!): Message!
  createConversation(title: String!, description: String!, participants: [String!]!): Conversation!
  setSchema: Boolean!
  dropAllData: Boolean!
  dropData: Boolean!
  deleteComment(commentId: String!): Delete!
}

input UserRegisterInput {
  openId: String!
  unionId: String!
  name: String!
  gender: GENDER!
  avatarImageUrl: String!
  school: String!
  grade: String!
  userId: String!
  sign: String!
}

input CreateSubjectInput {
  title: String!
  description: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!
}

input UpdateSubjectInput {
  id: String!
  title: String
  description: String
  avatarUrl: String
  background: String
}
