# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  id: String!
  content: String!
  createdAt: String!

  """获取该评论下的所有评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """Relay版comments"""
  commentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): CommentsConnectionWithRelay!

  """按热度获取该评论下的所有评论"""
  trendingComments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """获取该评论下的点赞信息"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """获取该评论的举报信息"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """获取被评论的对象"""
  to: PostAndCommentUnion!

  """评论的创建者，评论是匿名评论时，creator为null"""
  creator: User

  """评论未被删除时，此项为null"""
  delete: Delete

  """评论的匿名信息，非匿名评论，此项为null"""
  anonymous: Anonymous
}

enum ORDER_BY {
  TRENDING
  CREATED_AT_DESC
}

union PostAndCommentUnion = Post | Comment

type CommentsConnection {
  nodes: [Comment!]!
  totalCount: Int!
}

type Post {
  id: String!
  content: String!
  createdAt: String!
  images: [String!]

  """帖子的创建者，当帖子是匿名帖子时，返回null"""
  creator: User

  """帖子的所有评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """获取所有评论 relay分页版"""
  commentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): CommentsConnectionWithRelay!

  """帖子所属的主题"""
  subject: Subject

  """帖子的点赞"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """帖子收到的举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """帖子的折叠评论"""
  foldedComments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """按热度返回评论"""
  trendingComments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """帖子未被删除时，此项为空"""
  delete: Delete

  """帖子的匿名信息，非匿名帖子此项为空"""
  anonymous: Anonymous
}

type PostsConnection {
  nodes: [Post!]!
  totalCount: Int!
}

type PostsConnectionWithRelay {
  edges: [PostEdge!]!
  pageInfo: PostPageInfo!
  totalCount: Int!
}

type PostEdge {
  node: Post
  cursor: String
}

type PostPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type CommentsConnectionWithRelay {
  edges: [CommentEdge!]!
  pageInfo: CommentPageInfo!
  totalCount: Int!
}

type CommentEdge {
  node: Comment
  cursor: String
}

type CommentPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Block {
  id: String!
  createdAt: String!
  description: String!

  """被拉黑的对象"""
  to: User!

  """拉黑的创建者"""
  creator: Admin!
}

type BlocksConnection {
  nodes: [Block!]!
  totalCount: Int!
}

type Admin {
  id: String!
  userId: String!
  name: String!
  avatarImageUrl: String!
  createdAt: String!
  updatedAt: String!
  lastLoginedAt: String!

  """管理员的凭证"""
  credential: ICredential

  """当前管理员认证过的其他管理员"""
  credentials(first: Int = 10, offset: Int = 0): ICredentialsConnection!

  """当前管理员拥有的权限"""
  privileges(first: Int = 10, offset: Int = 0): PrivilegesConnection!

  """当前管理员折叠的评论"""
  folds(first: Int = 10, offset: Int = 0): FoldsConnection!

  """当前管理员拉黑的用户"""
  blocks(first: Int = 10, offset: Int = 0): BlocksConnection!

  """当前管理员创建的置顶"""
  pins(first: Int = 10, offset: Int = 0): PinsConnection!

  """当前管理员的所有删除操作"""
  deletes(first: Int = 10, offset: Int = 0): DeletesConnection!
}

type AdminsConnection {
  nodes: [Admin!]!
  totalCount: Int!
}

type Privilege {
  id: String!
  createdAt: String!
  value: IPRIVILEGE!

  """权限作用的对象"""
  to: AdminAndUserUnion!

  """权限的创建者"""
  creator: Admin!
}

"""全局权限值"""
enum IPRIVILEGE {
  ROOT
  ADMIN_CAN_AUTHEN_OTHER

  """管理员能创建一个新的管理员"""
  ADMIN_CAN_CREATE_ADMIN
  ADMIN_CAN_DELETE_ADMIN
  ADMIN_CAN_DELETE_USER
  ADMIN_CAN_CREATE_USER
  ADMIN_CAN_UPDATE_USER

  """管理员能通过一个举报"""
  ADMIN_CAN_ACCEPT_REPORT
  ADMIN_CAN_REJECT_REPORT

  """管理员能查看全局数据(某段时间内的注册数，点赞数，发帖数)"""
  ADMIN_CAN_VIEW_STATE

  """用户能创建一个新的主题"""
  USER_CAN_CREATE_SUBJECT
}

union AdminAndUserUnion = User | Admin

type PrivilegesConnection {
  nodes: [Privilege!]!
  totalCount: Int!
}

type Subject {
  id: String!
  createdAt: String!
  title: String!
  description: String!
  avatarImageUrl: String!
  backgroundImageUrl: String!

  """主题的创建者"""
  creator: User!

  """当前主题中的所有帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!
  postsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!
}

type SubjectsConnection {
  nodes: [Subject!]!
  totalCount: Int!
}

"""凭证是成为管理员的前提"""
type ICredential {
  id: String!
  createdAt: String!
  creator: Admin!
  to: Admin!
}

type ICredentialsConnection {
  nodes: [ICredential!]!
  totalCount: Int!
}

type Delete {
  id: String!
  createdAt: String!

  """删除的创建者"""
  creator: Admin!

  """被删除的对象"""
  to: PostAndCommentAndSubjectUnion!
}

union PostAndCommentAndSubjectUnion = Post | Comment | Subject

type DeletesConnection {
  nodes: [Delete!]!
  totalCount: Int!
}

type Fold {
  id: String!
  createdAt: String!

  """折叠的创建者"""
  creator: Admin!

  """被折叠的对象"""
  to: Comment!
}

type FoldsConnection {
  nodes: [Fold!]!
  totalCount: Int!
}

type Pin {
  id: String!
  createdAt: String!

  """置顶的创建者"""
  creator: Admin!

  """被置顶的对象，被置顶对象被删除时，返回null"""
  to: PostAndCommentUnion
}

type PinsConnection {
  totalCount: Int!
  nodes: [Pin!]!
}

type User implements Person & Node {
  """id 自动生成"""
  id: String!

  """用户账号"""
  userId: String!

  """用户昵称"""
  name: String!

  """当前用户创建的所有帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!
  postsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!

  """当前用户的所有点赞"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """当前用户发布的评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!
  commentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): CommentsConnectionWithRelay!

  """当前用户创建的所有主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """当前用户创建的所有会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """当前用户收到的所有举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """当前用户的ddl信息"""
  deadlines(startTime: String!, endTime: String!, first: Int!): DeadlinesConnection!

  """当前用户的课程信息"""
  curriculums(first: Int = 10, offset: Int = 0): CurriculumsConnection!

  """当前用户具有的权限"""
  privileges(first: Int = 10, offset: Int = 0): PrivilegesConnection!

  """当前用户的所有通知"""
  notifications(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): NotificationsConnection!

  """学号"""
  studentId: Int

  """微信openId,注册时传入微信code自动通过微信提供的接口获取获取"""
  openId: String!

  """微信unionId,注册时传入微信code自动通过微信提供的接口获取获取"""
  unionId: String!

  """用户性别"""
  gender: GENDER

  """学院"""
  college: String

  """校区"""
  subCampus: String

  """学校"""
  school: String

  """年级"""
  grade: String

  """用户创建时间"""
  createdAt: String!

  """用户信息的更新时间"""
  updatedAt: String!

  """用户上一次调用login接口获取token的系统时间"""
  lastLoginedAt: String!

  """用户头像链接"""
  avatarImageUrl: String!
}

interface Person implements Node {
  userId: String!
  name: String!
  id: String!

  """当前用户创建的所有帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!
  postsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!

  """当前用户的所有点赞"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """当前用户发布的评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!
  commentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): CommentsConnectionWithRelay!

  """当前用户创建的所有主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """当前用户创建的所有会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """当前用户收到的所有举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """当前用户的ddl信息"""
  deadlines(startTime: String!, endTime: String!, first: Int!): DeadlinesConnection!

  """当前用户的课程信息"""
  curriculums(first: Int = 10, offset: Int = 0): CurriculumsConnection!

  """当前用户具有的权限"""
  privileges(first: Int = 10, offset: Int = 0): PrivilegesConnection!

  """当前用户的所有通知"""
  notifications(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): NotificationsConnection!
}

interface Node {
  id: String!
}

enum GENDER {
  NONE
  MALE
  FEMALE
}

type LoginResult implements Node & Person {
  id: String!

  """用户账号"""
  userId: String!

  """用户昵称"""
  name: String!

  """当前用户创建的所有帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!
  postsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!

  """当前用户的所有点赞"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """当前用户发布的评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!
  commentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): CommentsConnectionWithRelay!

  """当前用户创建的所有主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """当前用户创建的所有会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """当前用户收到的所有举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """当前用户的ddl信息"""
  deadlines(startTime: String!, endTime: String!, first: Int!): DeadlinesConnection!

  """当前用户的课程信息"""
  curriculums(first: Int = 10, offset: Int = 0): CurriculumsConnection!

  """当前用户具有的权限"""
  privileges(first: Int = 10, offset: Int = 0): PrivilegesConnection!

  """当前用户的所有通知"""
  notifications(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): NotificationsConnection!

  """学号"""
  studentId: Int

  """微信openId,注册时传入微信code自动通过微信提供的接口获取获取"""
  openId: String!

  """微信unionId,注册时传入微信code自动通过微信提供的接口获取获取"""
  unionId: String!

  """用户性别"""
  gender: GENDER

  """学院"""
  college: String

  """校区"""
  subCampus: String

  """学校"""
  school: String

  """年级"""
  grade: String

  """用户创建时间"""
  createdAt: String!

  """用户信息的更新时间"""
  updatedAt: String!

  """用户上一次调用login接口获取token的系统时间"""
  lastLoginedAt: String!

  """用户头像链接"""
  avatarImageUrl: String!

  """token"""
  token: String!
}

type UsersConnection {
  nodes: [User!]!
  totalCount: Int!
}

type Anonymous {
  id: String!
  createdAt: String!
  watermark: String!

  """匿名的创建者，只有创建者自己可见"""
  creator: User

  """被匿名发布的对象"""
  to: PostAndCommentUnion!
}

type CensorDetail {
  """违禁品"""
  contraband: [String!]

  """广告"""
  ad: [String!]

  """辱骂"""
  abuse: [String!]

  """涉黄"""
  porn: [String!]

  """涉政"""
  politics: [String!]
}

type CensorResponse {
  """block: 建议直接拉黑; review: 建议人工复查; pass: 建议直接发布;"""
  suggestion: String!

  """详情"""
  detail: CensorDetail!
}

type Report implements Node {
  id: String!
  createdAt: String!
  type: REPORT_TYPE!
  description: String!
  state: REPORT_STATE!

  """被举报的对象"""
  to: Report2Union!

  """举报的创建者"""
  creator: User!

  """举报所在的会话"""
  conversation: Conversation!
}

enum REPORT_TYPE {
  LEWD_HARASS
  FRAUD
  OTHER
}

enum REPORT_STATE {
  OPEN
  PENDING
  CLOSE
}

union Report2Union = User | Post | Comment

type ReportsConnection {
  nodes: [Report!]!
  totalCount: Int!
}

type Conversation implements Node {
  id: String!
  createdAt: String!
  title: String!
  description: String!
  state: CONVERSATION_STATE!

  """会话中的所有消息"""
  messages(first: Int = 10, offset: Int = 0): MessageItemConnection!

  """会话的所有参与者"""
  participants(first: Int = 10, offset: Int = 0): ParticipantsConnection!
}

enum CONVERSATION_STATE {
  RUNNING
  CLOSE
}

type MessageItemConnection {
  nodes: [MessageItem!]!
  totalCount: Int!
}

union MessageItem = Message | Report

type ParticipantsConnection {
  nodes: [User!]!
  totalCount: Int!
}

type ConversationsConnection {
  nodes: [Conversation!]!
  totalCount: Int!
}

type Message implements Node {
  id: String!
  createdAt: String!
  content: String!

  """消息所属的会话"""
  conversation: Conversation!

  """消息的创建者"""
  creator: MessageCreatorUnion!
}

union MessageCreatorUnion = User | Admin

type Votable {
  """对象当前总赞数"""
  totalCount: Int!

  """浏览者是否能点赞"""
  viewerCanUpvote: Boolean!

  """浏览者是否已经点赞"""
  viewerHasUpvoted: Boolean!

  """被点赞或取消点赞的对象的id"""
  to: String!
}

type VotesConnection {
  totalCount: Int!
  viewerCanUpvote: Boolean!
  viewerHasUpvoted: Boolean!
  nodes: [Vote!]!
}

type Vote {
  id: String!
  createdAt: String!

  """点赞的创建者"""
  creator: User!

  """被点赞的对象"""
  to: PostAndCommentUnion!
}

type Notification {
  """通知的id"""
  id: String!

  """通知的创建时间"""
  createdAt: String!

  """通知涉及的操作"""
  action: NOTIFICATION_ACTION!

  """当前通知是否已被通知接收者设置为已读状态"""
  isRead: Boolean!

  """通知涉及的对象"""
  about: PostAndCommentUnion!

  """被通知的对象"""
  to: User!

  """通知的创建者，匿名评论时为空"""
  creator: User
}

enum NOTIFICATION_ACTION {
  ADD_COMMENT_ON_POST
  ADD_COMMENT_ON_COMMENT
  ADD_UPVOTE_ON_POST
  ADD_UPVOTE_ON_COMMENT
}

type NotificationsConnection {
  edges: [NotificationEdge!]!
  pageInfo: NotificationPageInfo!
  totalCount: Int!
}

type NotificationEdge {
  node: Notification
  cursor: String
}

type NotificationPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Curriculum {
  id: String!

  """上课地点"""
  destination: String!

  """第几节课开始"""
  start: Int!

  """第几节课结束"""
  end: Int!

  """课程名称"""
  name: String!

  """课程周期，比如 1-17周"""
  circle: String!

  """课程描述，比如 1-17周 星期五 第3-4节 致理楼L1-302,1-17周 星期四 第3-4节 致理楼L1-302"""
  description: String!

  """该节课位于一星期中的第几天"""
  dayOfWeek: Int!
}

type CurriculumsConnection {
  nodes: [Curriculum!]!
  totalCount: Int!
}

type SetDbSchema {
  arrayIndexOffset: Int!
  array: [String!]!
  pivot_: Float!
  wrappers_: String
  messageId_: String
  convertedPrimitiveFields_: String!
}

type Deadline {
  id: String!
  courseContentId: Int!
  courseId: Int!
  ownerUserId: Int!
  notificationIds: [Int!]!
  parentId: String!
  sourceId: String!
  courseName: String!
  dataPending: Boolean!
  dateAdded: String!
  startDate: String!
  endDate: String
  dueDate: String!
  eventType: DEADLINE_EVENT_TYPE!
  eventUrl: String
  groupCount: Int!
  ownerName: String!
  receiverCount: Int!
  recipientCount: Int!
  recipientId: Int!
  recipientType: DEADLINE_RECIPIENT_TYPE!
  seen: Boolean!
  sourceData: String
  sourceDataType: DEADLINE_SOURCE_DATA_TYPE!
  sourceType: DEADLINE_SOURCE_TYPE!
  title: String!
  type: DEADLINE_TYPE!
  viewId: Int!

  """ddl的创建者"""
  creator: User!
}

enum DEADLINE_EVENT_TYPE {
  OVERDUE
  DUE
}

enum DEADLINE_RECIPIENT_TYPE {
  RECEIVER
}

enum DEADLINE_SOURCE_DATA_TYPE {
  BLACKBOARD_PLATFORM_GRADEBOOK2_GRADABLEITEM
}

enum DEADLINE_SOURCE_TYPE {
  AS
}

enum DEADLINE_TYPE {
  SCHEDULED
}

type DeadlinesConnection {
  nodes: [Deadline!]!
  totalCount: Int!
}

type SearchResultItemConnection {
  totalCount: Int!
  nodes: [SearchResultItem!]!
}

union SearchResultItem = Post | User | Comment | Subject

type PostImagesUploadCredentialInfo {
  """签证生效时间"""
  startTime: Int!

  """签证过期时间"""
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!

  """桶id"""
  bucket: String!

  """桶所在的地域"""
  region: String!

  """key"""
  keys: [String!]!
}

type SubjectImagesUploadCredentialInfo {
  startTime: Int!
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!
  bucket: String!
  region: String!
  keys: [String!]!
}

type AvatarImageUploadCredentialInfo {
  startTime: Int!
  expiredTime: Int!
  expiration: String!
  sessionToken: String!
  tmpSecretId: String!
  tmpSecretKey: String!
  bucket: String!
  region: String!
  key: String!
}

type View {
  id: String!
  createdAt: String!
}

type Query {
  """以postId获取一个帖子"""
  post(id: String!): Post!

  """获取所有帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection! @deprecated(reason: "请使用postsWithRelay")

  """获取指定时间段内的帖子"""
  postsCreatedWithin(first: Int = 10, offset: Int = 0, startTime: String!, endTime: String!): PostsConnection!

  """Relay分页版的posts接口"""
  postsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!

  """按热度获取所有帖子"""
  trendingPostsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!
  trendingPosts(first: Int = 10, offset: Int = 0): PostsConnection!

  """获取所有被删除的帖子"""
  deletedPosts(first: Int = 10, offset: Int = 0): PostsConnection!

  """relay分页版 以id获取某帖子下所有评论"""
  postCommentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
    id: String!
  ): CommentsConnectionWithRelay!

  """指定时间段内注册的所有用户"""
  registerWithin(first: Int = 10, offset: Int = 0, startTime: String!, endTime: String!): UsersConnection!

  """当前id对应的的用户画像"""
  whoAmI: AdminAndUserWithPrivatePropsUnion!

  """获取所有用户"""
  users(first: Int = 10, offset: Int = 0): UsersConnection!

  """以id获取用户"""
  user(id: String!): User!

  """测试接口"""
  userPostsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
    id: String!
  ): PostsConnectionWithRelay!
  userCommentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
    id: String!
  ): CommentsConnectionWithRelay!

  """查询某时间段内发布的所有评论"""
  commentsCreatedWithin(first: Int = 10, offset: Int = 0, startTime: String!, endTime: String!): CommentsConnection!

  """以id获取一条评论"""
  comment(id: String!): Comment!

  """Relay版 以id获取某评论下所有评论"""
  commentCommentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
    id: String!
  ): CommentsConnectionWithRelay!

  """获取所有被删除的评论"""
  deletedComments(first: Int = 10, offset: Int = 0): CommentsConnection!

  """某段时间内的所有点赞"""
  votesCreatedWithin(first: Int = 10, offset: Int = 0, startTime: String!, endTime: String!): VotesConnection!

  """以id获取管理员"""
  admin(id: String!): Admin!

  """获取所有管理员"""
  admins(first: Int = 10, offset: Int = 0): AdminsConnection!

  """以id获取主题"""
  subject(id: String!): Subject!

  """获取所有主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """Relay版 以id获取某主题下所有帖子"""
  subjectPostsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
    id: String!
  ): PostsConnectionWithRelay!

  """简单的搜索"""
  search(
    first: Int = 10
    offset: Int = 0

    """检索的类型"""
    type: SEARCHTYPE!

    """待检索的关键字"""
    query: String!
  ): SearchResultItemConnection!

  """以id获取举报"""
  report(id: String!): Report!

  """获取所有的举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """以id获取消息"""
  message(id: String!): Message!

  """以id获取会话"""
  conversation(id: String!): Conversation!

  """获取所有会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """以id获取删除"""
  delete(deleteId: String!): Delete!

  """获取所有的删除"""
  deletes(first: Int = 10, offset: Int = 0): DeletesConnection!

  """用户上传头像时，先根据文件名获取临时上传凭证信息"""
  getAvatarImageUploadCredentialInfo(fileName: String!): AvatarImageUploadCredentialInfo!

  """用户上传帖子图片时，先根据文件名获取临时上传凭证信息"""
  getPostImagesUploadCredentialInfo(fileNames: [String!]!): PostImagesUploadCredentialInfo!

  """用户创建主题时，先根据文件名获取临时上传凭证"""
  getSubjectImagesUploadCredentialInfo(fileNames: [String!]!): SubjectImagesUploadCredentialInfo!

  """以id获取权限"""
  privilege(id: String!): Privilege!

  """获取所有权限"""
  privileges(first: Int = 10, offset: Int = 0): PrivilegesConnection!

  """以id获取ddl"""
  deadline(deadlineId: String!): Deadline!

  """获取所有课程"""
  curriculums(first: Int = 10, offset: Int = 0): CurriculumsConnection!

  """以id获取课程"""
  curriculum(id: String!): Curriculum!

  """获取所有的折叠"""
  folds(first: Int = 10, offset: Int = 0): FoldsConnection!

  """所有的拉黑"""
  blocks(first: Int = 10, offset: Int = 0): BlocksConnection!

  """获取一个凭证"""
  credential(credentialId: String!): ICredential!

  """获取所有凭证"""
  credentials(first: Int = 10, offset: Int = 0): ICredentialsConnection!

  """获取一个置顶信息"""
  pin(id: String!): Pin!

  """获取全部置顶信息"""
  pins(first: Int = 10, offset: Int = 0): PinsConnection!

  """文本审查的测试接口，测试一段文本是否违规"""
  censorText(content: String!): CensorResponse!
}

union AdminAndUserWithPrivatePropsUnion = UserWithPrivateProps | Admin

"""包含属性是否个人可见的用户对象"""
type UserWithPrivateProps implements Person & Node {
  """学院属性是否私有"""
  isCollegePrivate: Boolean

  """校区属性是否私有"""
  isSubCampusPrivate: Boolean

  """性别属性是否私有"""
  isGenderPrivate: Boolean

  """学校属性是否私有"""
  isSchoolPrivate: Boolean

  """年级属性是否私有"""
  isGradePrivate: Boolean
  id: String!

  """学号"""
  studentId: Int
  name: String!
  userId: String!

  """微信openId,注册时传入微信code自动通过微信提供的接口获取获取"""
  openId: String!

  """微信unionId,注册时传入微信code自动通过微信提供的接口获取获取"""
  unionId: String!

  """用户性别"""
  gender: GENDER

  """学院"""
  college: String

  """校区"""
  subCampus: String

  """学校"""
  school: String

  """年级"""
  grade: String

  """用户创建时间"""
  createdAt: String!

  """用户信息的更新时间"""
  updatedAt: String!

  """用户上一次调用login接口获取token的系统时间"""
  lastLoginedAt: String!

  """用户头像链接"""
  avatarImageUrl: String!

  """当前用户创建的所有帖子"""
  posts(first: Int = 10, offset: Int = 0): PostsConnection!
  postsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): PostsConnectionWithRelay!

  """当前用户的所有点赞"""
  votes(first: Int = 10, offset: Int = 0): VotesConnection!

  """当前用户发布的评论"""
  comments(first: Int = 10, offset: Int = 0): CommentsConnection!
  commentsWithRelay(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): CommentsConnectionWithRelay!

  """当前用户创建的所有主题"""
  subjects(first: Int = 10, offset: Int = 0): SubjectsConnection!

  """当前用户创建的所有会话"""
  conversations(first: Int = 10, offset: Int = 0): ConversationsConnection!

  """当前用户收到的所有举报"""
  reports(first: Int = 10, offset: Int = 0): ReportsConnection!

  """当前用户的ddl信息"""
  deadlines(startTime: String!, endTime: String!, first: Int!): DeadlinesConnection!

  """当前用户的课程信息"""
  curriculums(first: Int = 10, offset: Int = 0): CurriculumsConnection!

  """当前用户具有的权限"""
  privileges(first: Int = 10, offset: Int = 0): PrivilegesConnection!

  """当前用户的所有通知"""
  notifications(
    """最新的n个对象"""
    first: Int

    """向前分页游标"""
    after: String

    """最早的n个对象"""
    last: Int

    """向后分页游标"""
    before: String

    """排序方式"""
    orderBy: ORDER_BY = CREATED_AT_DESC
  ): NotificationsConnection!
}

enum SEARCHTYPE {
  USER
  COMMENT
  POST
  SUBJECT
}

type Mutation {
  """创建一个帖子"""
  createPost(
    """帖子内容"""
    content: String!

    """帖子图片"""
    images: [String!]

    """帖子所属的主题"""
    subjectId: String

    """是否匿名帖子"""
    isAnonymous: Boolean = false
  ): Post!

  """登录"""
  login(
    """用户账号"""
    userId: String!

    """用户密码"""
    sign: String!
  ): LoginResult!

  """通过小程序的code进行登录"""
  loginByCode(code: String!): LoginResult!

  """注册"""
  register(
    """学号"""
    studentId: Int

    """学院"""
    college: UserStringPropMap!

    """校区"""
    subCampus: UserStringPropMap!

    """用户账号"""
    userId: String!

    """用户密码"""
    sign: String!

    """微信login code"""
    code: String

    """用户昵称"""
    name: String!

    """用户性别"""
    gender: UserGenderPropMap!

    """用户头像链接"""
    avatarImageUrl: String!

    """学校"""
    school: UserStringPropMap!

    """年级"""
    grade: UserStringPropMap!
  ): User!

  """用于调试的接口: 根据userId 删除一个刚创建的用户，该用户不能有点赞评论发帖等操作"""
  pureDeleteUser(userId: String!): Boolean!

  """更新用户画像"""
  updateUser(
    """学院"""
    college: UserStringPropMap

    """校区"""
    subCampus: UserStringPropMap

    """用户密码"""
    sign: String

    """用户昵称"""
    name: String

    """用户性别"""
    gender: UserGenderPropMap

    """用户头像链接"""
    avatarImageUrl: String

    """用户的学校"""
    school: UserStringPropMap

    """用户的年级"""
    grade: UserStringPropMap
  ): User!

  """添加一条评论到评论"""
  addCommentOnComment(
    """评论的内容"""
    content: String!

    """被评论的对象的id"""
    to: String!

    """是否匿名发布这条评论"""
    isAnonymous: Boolean = false
  ): Comment!

  """添加一条评论到帖子"""
  addCommentOnPost(
    """评论的内容"""
    content: String!

    """被评论的对象的id"""
    to: String!

    """是否匿名发布这条评论"""
    isAnonymous: Boolean = false
  ): Comment!

  """点赞一个帖子"""
  addUpvoteOnPost(postId: String!): Votable!

  """点赞一条评论"""
  addUpvoteOnComment(commentId: String!): Votable!

  """取消点赞"""
  removeUpvoteOnComment(from: String!): Votable!

  """取消点赞"""
  removeUpvoteOnPost(from: String!): Votable!

  """注册一个管理员，需要使用authen认证新注册的管理员"""
  registerAdmin(
    userId: String!
    name: String!
    avatarImageUrl: String!

    """管理员密码"""
    sign: String!
  ): Admin!

  """以id删除一个主题"""
  deleteSubject(id: String!): Delete!

  """以id更新一个主题"""
  updateSubject(id: String!, title: String, description: String, avatarImageUrl: String, backgroundImageUrl: String): Subject!

  """创建一个主题"""
  createSubject(title: String!, description: String!, avatarImageUrl: String!, backgroundImageUrl: String!): Subject!

  """举报一条评论"""
  addReportOnComment(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """举报一个帖子"""
  addReportOnPost(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """举报一个用户"""
  addReportOnUser(
    """举报的类型，枚举值"""
    type: REPORT_TYPE!

    """举报的描述"""
    description: String!

    """被举报对象的id"""
    to: String!
  ): Report!

  """管理员接口：认为举报无效"""
  discardReport(content: String!, reportId: String!): Boolean!

  """管理员接口：认为举报有效"""
  acceptReport(content: String!, reportId: String!): Boolean!

  """向指定的会话中添加一条消息"""
  addMessageOnConversation(content: String!, id: String!): Message!

  """创建一个会话"""
  createConversation(title: String!, description: String!, participants: [String!]!): Conversation!

  """关闭一个会话"""
  closeConversation(conversationId: String!): Conversation!

  """重置数据库schema"""
  setSchema: SetDbSchema!

  """删除数据库所有数据，包括schema"""
  dropAllData: Boolean!

  """删除数据库所有数据，但保留schema"""
  dropData: Boolean!

  """管理员或用户删除一个帖子"""
  deletePost(postId: String!): Delete!

  """管理员或用户删除一个评论"""
  deleteComment(commentId: String!): Delete!

  """添加一个权限到某管理员"""
  addPrivilegeOnAdmin(privilege: IPRIVILEGE!, adminId: String!): Privilege!

  """添加一个权限到某用户"""
  addPrivilegeOnUser(privilege: IPRIVILEGE!, id: String!): Privilege!

  """从某用户移除一个权限"""
  removePrivilegeOnUser(privilege: IPRIVILEGE!, from: String!): Boolean!

  """从某管理员移除一个权限"""
  removePrivilegeOnAdmin(privilege: IPRIVILEGE!, from: String!): Boolean!

  """在当前用户上添加一个ddl"""
  addDeadline(courseContentId: Int!, courseId: Int!, ownerUserId: Int!, notificationIds: [Int!]!, parentId: String!, sourceId: String!, courseName: String!, dataPending: Boolean!, dateAdded: String!, startDate: String!, endDate: String, dueDate: String!, eventType: DEADLINE_EVENT_TYPE!, eventUrl: String, groupCount: Int!, ownerName: String!, receiverCount: Int!, recipientCount: Int!, recipientId: Int!, recipientType: DEADLINE_RECIPIENT_TYPE!, seen: Boolean!, sourceData: String, sourceDataType: DEADLINE_SOURCE_DATA_TYPE!, sourceType: DEADLINE_SOURCE_TYPE!, title: String!, type: DEADLINE_TYPE!, viewId: Int!): Deadline!

  """增加帖子的浏览量"""
  addViewOnPost(postId: String!): View!

  """增加评论的浏览量"""
  addViewOnComment(commentId: String!): View!

  """添加一个课程到当前用户"""
  addCurriculum(
    """上课地点"""
    destination: String!

    """第几节课开始"""
    start: Int!

    """第几节课结束"""
    end: Int!

    """课程名称"""
    name: String!

    """课程周期，比如 1-17周"""
    circle: String!

    """课程描述，比如 1-17周 星期五 第3-4节 致理楼L1-302,1-17周 星期四 第3-4节 致理楼L1-302"""
    description: String!

    """该节课位于一星期中的第几天"""
    dayOfWeek: Int!

    """授课教师的名字"""
    educatorName: String!

    """课程号"""
    curriculumId: String!
  ): Curriculum!

  """折叠一条评论"""
  addFoldOnComment(commentId: String!): Fold!

  """解除拉黑一个用户"""
  removeBlockOnUser(from: String!): Boolean!

  """拉黑一个用户"""
  addBlockOnUser(id: String!, description: String!): Block!

  """已存在的管理员认证一个新注册的管理员"""
  authenAdmin(to: String!): ICredential!

  """置顶一个帖子"""
  addPinOnPost(postId: String!): Pin!

  """对一个帖子取消置顶"""
  removePinOnPost(from: String!): Boolean!

  """通知接收者本人已读一个通知"""
  setReadNotification(id: String!): Notification!
}

input UserStringPropMap {
  """属性的值"""
  value: String!

  """是否私有属性"""
  isPrivate: Boolean = false
}

input UserGenderPropMap {
  """属性的值"""
  value: GENDER!

  """是否私有属性"""
  isPrivate: Boolean = false
}

type Subscription {
  """监听指定帖子或评论的点赞数"""
  votesChanged(
    """帖子或评论的id"""
    ids: [String!]!
  ): Votable!
}
